Spring配置文件
	Bean的依赖注入概念
		依赖注入（Dependency Injection）：它是Spring框架的核心IOC具体的实现
		在编写程序时，通过控制反转，把对象的创建交给了Spring，但是代码中时不可能出现没有依赖的情况。
		IOC解耦只是降低他们的依赖关系，但是不会消除。例如：业务层仍会调用持久层的方法。
		那这这种业务层和持久层的依赖关系，在使用Spring之后，啾然Spring来维护了。
		简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。  

property 标签是注入set方法时使用
constructor-arg 标签是注入属性时使用


Spring配置数据源（数据库连接池）
	数据源的作用
		数据源（连接池）是提高程序性能而出现的
		需要事先实例化数据源，初始化部分连接资源
		使用连接资源时从数据源中获取
		使用完毕后将连接资源归还给数据源、
	常见的数据源（连接池）：DBCP、C3P0、BoneCP、Druid等
		
	数据源的开发步骤：
		导入数据源的坐标和数据库的驱动坐标
		创建数据源对象
		设置数据源的基本连接数据，
		使用数据源获取连接和归还连接
	



	注解开发：
		Spring是轻代码而重配置的框架，配置比较繁重，影响开发的效率，所以注解开发的一种趋势，注解代替xml配置文件可以简化配置，提高开发效率
		
		Spring原始注解主要是替代<Bean>的配置
			注解					说明
		@Component			使用在类上用于实例化Bean
		@Controller			使用在web层类上用于实例化Bean
		@Service			使用在service层类上用于实例化Bean
		@Repository			使用在dao层类上用于实例化Bean
		@Autowired			使用在字段上用于根据类型依赖注入
		@Qualifier 			结合@Autowired一起使用用于根据名称进行依赖注入
		@Resource			相当于@Autowired+@Qualifier，按照名称进行注入
		@Value				注入普通属性
		@Scope				标注Bean的作用范围
		@PostConstruct			使用在方法上标注该方法是Bean的初始化方法
		@PreDestroy			使用在方法上标注该方法是Bean的销毁方法	

 	
	注意：
		使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指哪个包及其子包下的Bean需要进行扫描以便识别使用注解的类、字段和方法。
			<context:component-scan base-package="com.itcast"></context:component-scan>	
		

		<import resource="xxx.xml">可以加载其他 xml配置文件

	加载外部properties文件
		<context:property-placeholder location="classpath:jdbc.properties"/>

		Spring新注解
			使用上面的注解还不能替代xml配置文件，还需要使用注解替代的配置如下
				非自定义的Bean的配置：<Bean>
				加载properties文件的配置：<context:property-placeholder>
				组件扫描的配置：<context:component-scan>
				引入其他xml文件：<import>
		


			新注解
				注解					说明 			
			@Configuration				用于指定当前类是一个Spring配置类，当创建容器时会从该类上加载注解
			@ComponentScan				用于指定Spring在初始化容器时要扫描的包。
								作用和Spring的xml配置文件中的
								<context:commponent-scan base-package="com.itcast"/>一样
			@Bean					使用在方法上，标注将该方法的返回值储存到Spring容器中
			@PropertySource				用于加载.properties文件中的配置
			@Import					用于导入其他配置类




		Spring集成Junit
			Spring集成Junit步骤
				导入Spring集成Junit的坐标
				使用@Runwith注解替换原来导入运行期
				使用@ContextConfiguration指定配置文件或配置类
				使用@Autowired注入需要的测试的对象
				创建测试方法进行测试

	##动态代理的优点
			解耦合
			在不动代码的情况下对方法进行增强
			减少重复代码，提高开发效率，并且便于维护

		AOP的简介
			什么是AOP
				AOP为Aspect Oriented Programming的缩写，意思为切面编程，是通过预编译方式和运行期动态代理实现持续功能的统一维护的一种技术
				AOP是OOP（面向对象）的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务				逻辑的各个部分进行隔离，从而使得业务逻辑个部分之间的耦合度降低，提高程序的可重用性，同时提高了开发效率。

			AOP的作用及其优势
				作用：在许运行期间，在不修改源代码的情况下对方法进行功能增强
				优势：减少重复代码，提高开发效率，并且便于维护
			
			AOP的底层实现
				实际上，AOP的底层是通过Spring提供的动态代理技术实现。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行				增强功能的介入，在去调用目标对象的方法，从而完成功能的增强
	
			AOP的动态代理技术
				常用的动态代理技术
					JDK代理：基于接口的动态代理技术  缺点：必须需要接口才可以实现
					cgilb代理：基于父类的动态代理技术


		AOP相关概念
			Spring的AOP实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法			增强
		AOP相关术语：
			Target（目标对象）：代理的目标对象
			Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类
			Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在Spring中，这些点指的是方法，因为Spring只支持方法类型的连接点
			Pointcut（切入点）：所谓切入点是指我们要对那些JoinPoint进行拦截的定义
			Advice（通知、增强）：所谓通知是指拦截到Joinpoint之后所要做的事情就是通知
			Aspect（切面）：是切入点和通知（引介）的结合
			WeAVing（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。Spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入
		
		AOP技术实现内容
			Spring框架监控切入点的执行。一旦监控到切入点方法被运行，使用代理机制动态创建目标对象的代理对鞋子那个，根据通知类别，在代理对象的对应位置			，将通知对应的功能织入，x完成完整的代码逻辑运行。
		
		知识要点
			AOP：面向切面编程
			AOP底层实现：基于JDK的动态代理和基于Cglib的动态代理
			AOP的重点概念：
				Pointcut（切入点）:被增强的方法
				Advice（通知/增强）：封装增强业务逻辑的方法
				Aspect(切面)：切点+通知
				WeAVing（织入）：将切点与通知结合的过程
			开发明确事项：
				谁是切点（切点表达式配置）
				谁是通知（切面类中的增强方法）
				将切点和通知进行织入配置

	需要导的坐标是 ： aspectjweaver

	XML配置AOP详解
		切点表达式的写法
			表达语法
				execution（修饰符 返回值类型  包名.类名.方法名（参数））

			访问修饰符可以省略
			返回值类型 、包名、类名、方法名可以使用星号*代表任意
			包名与类名之间一点.代表当前包下的类，两个带你..代表当前包及子包下的类
			参数列表可以使用两个点..代表任意个数，任意类型的参数列表


		通知的类型
			<aop:通知类型 method=“切面类中方法名” Pointcut=“切点表达式”></aop：通知类型>


		名称			标签				说明
		
		前置通知		<aop:before>			用于配置前置通知。指定增强的方法在切入点方法之前执行
		后置通知		<aop:after-returning>		用于配置后置通知。指定增强的方法在切入点方法之后执行
		环绕通知		<aop:around>			用于配置环绕通知。指定增强的方法在切入点之前和之后都执行
		异常抛出通知		<aop:throwing>			用于配置异常抛出通知。指定增强的方法在出现异常时执行
		最终通知		<aop:after>			用于配置最终通知。无论增强方法执行是否有异常都会执行



		切点表达式的抽取
			当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用Pointcut-ref替代Pointcut属性来引用抽取后的切点表达式。
			<aop:config>

				<aop:aspect ref="目标类名">
					<aop:pointcut id="mypont" expression="execution(* cn.itrcast.aop.*.*(..))"/>
					<aop:before method="目标类名的方法名" pointcut-ref="mypont">	
					</aop:aspect>

				</aop:config>

	知识要点
		aop织入的配置
			<aop:config> <aop:aspect ref="切面类"><aop:before method="通知方法" pointcut="切面表达式"></aop:before></aop:aspect></aop:config>
		
		通知类型：前置通知，后置通知，环绕通知，异常抛出通知，最终通知
		切点表达式的写法：
			execution（【修饰符】 返回值类型 包名.类名.方法名(参数)）


		注解配置AOP详解
			注解通知类型
			
			通知的配置语法@通知注解（“切面表达式”）
		
			名称 				注解				说明

			前置通知			@Before				用于配置前置通知，指定增强的方法在切入点方法之前执行
			后置通知			@AfterReturning			用于配置后置通知。指定增强的方法在切入点方法之后执行
			环绕通知			@Around				用于配置环绕通知。指定增强方法在切入点之前和之后都执行
			异常抛出通知			@AfterThrowing			用于配置异常抛出通知。指定增强的方法在出现异常时执行
			最终通知			@After				用于配置最终通知。无论增强方式执行是否有异常都会执行

		切点表达式的抽取
			同xml配置aop一样，我们可以将切入点表达式抽取，抽取方式是在切面内定义方法，在该方法上使用@Pointcut注解定义切点表达式，然后在增强注解上进行			引用


		知识要点
			注解aop开发步骤
				使用@Aspect标注切面类
				使用@通知注解标注通知方法
				在配置文件中配置aop自动代理<aop:aspecth-autoproxy/>
		
	Spring JdbcTemplate基本使用

		JDBCTemplate概述
			它是Spring框架中的一个对象，是对原始繁琐的JdbcAPI对象的简单封装。Spring框架为我们提供了很多的操作模板。例如：操作关系型数据的JDBCTemplate和HlbernateTemplate,操作nosql数据库的RedisTemplate。操作消息队列的JMSTemplate等等。



		编程事务控制三大对象
			PlatformTransactionManager	平台  事务管理平台
	
			TransactionDefinition		事务定义信息（事务隔离级别，传播行为，超时，只读，回滚规则） 这些也是事务属性
	
			TransactionStatus		事务运行状态
	
	spring配置事务需要用到连接池 如druid c3p0 等数据库连接池 还有spring-tx坐标 使用tx域 设置 事务的隔离级别  传播行为  是否只读  回滚规则 超时管理
	在使用 AOP（面向切面编程思想 进行 事务注入）










#####################################################################################################################################################
#####################################################################################################################################################
概念 
	什么是框架：Spring是分层的 一站式 轻量级开源框架

	什么是框架：是对开发过程中重复代码的抽取，对复杂问题的封装 

	一站式： 每个框架都是在特定领域内解决特定的问题

	分层：是针对每一层都有解决的方案

	框架的特点：

Spring 概述
	Spring优势
		方便解耦，简化开发

		AOP编程的支持

		声明式事务的支持

		方便程序的测试

		方便集成各种优秀的框架

		降低JavaEE API的使用难度
	
		Java源码是经典学习典范

Spring IOC（重点）
	概念：
		IOC：控制反转
			将程序创建对象的权利反转给Spring（以后程序中绝大部分的对象都是有Spring来创建）
	IOC原理
		使用工厂+配置文件+反射  创建对象
	IOC解决的问题
		降低类与类之间的耦合（编译期）
	IOC的使用
		
Spring DI（是IOC的一部分）
	概念：
		DI：依赖注入
		
	DI原理
	DI解决的问题
	DI的使用