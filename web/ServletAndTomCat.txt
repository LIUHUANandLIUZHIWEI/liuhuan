
## web相关概念回顾
	1. 软件架构
		1. C/S：客户端/服务器端
		2. B/S：浏览器/服务器端

	2. 资源分类
		1. 静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析
			* 如： html,css,JavaScript
		2. 动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器   （浏览器只能解析静态资源）
			* 如：servlet/jsp,php,asp....
			
	3. 网络通信三要素
		1. IP：电子设备(计算机)在网络中的唯一标识。   www.baidu.com  DNS   192.168.56.11
		2. 端口：应用程序在计算机中的唯一标识。 0~65536    0~1024   3306  2425  80  8080
		3. 传输协议：规定了数据传输的规则
			1. 基础协议：
				1. tcp:安全协议，三次握手。 速度稍慢
				2. udp：不安全协议。 速度快,传输数据有大小限制(64K)


## web服务器软件：
	* 服务器：安装了服务器软件的计算机
	* 服务器软件：接收用户的请求，处理请求，做出响应
	* web服务器软件：接收用户的请求，处理请求，做出响应。
		* 在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目
		* web容器


	* 常见的java相关的web服务器软件：
		* webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。
		* webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。
		* JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。
		* Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。 


	* JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范



Servlet（重点） server applet
	概念：运行在服务器端的一个小程序
		servlet就是一个接口，定义了Java类被浏览器访问到（TomCat识别）的规则
		将来我们自定义一个类，实现servlet接口，复写方法。

	快速入门：
		1，创建JavaEE的项目
		2，定义一个类，实现servlet接口
		3，实现接口的所有抽象方法
		4，配置servlet
			配置语法：在web.xml中配置
				<servlet>
					<servlet-name>为类起名</sevlet-name>
					<servlet-class>完整包名.类名</servlet-class>	
				</servlet>
				<servlet-mapping>
					<servlet-name>为类起的名字</servlet-name>
					<url-pattern>/在浏览器中的名字</url-pattern>
				</servlet-mapping>

	执行原理：
		1，当服务器接收到浏览器的请求后，会解析URl路径，获取访问的servlet的资源路径
		2，查找web.xml文件，是否有对应的<url-patten>标签体内容
		3，如果有，则在找到对应的<sevlet-class> 全类名
		4,tomcat会将字节码文件加载内存，并且创建其对象
		5，调用其方法

	Servlet的生命周期
			init:初始化方法 servlet被创建时 只执行一次
				servlet什么时候被创建
					默认情况下，第一次被访问时，servlet被创建
					可以配置执行servlet的创建时机。在<servlet>标签下配置
						指定servlet的创建时机 在配置文件中 <load-on-startuo></load-on-startuo>默认为负数
							正数在启动服务器时 创建  负数在第一次访问时创建
					Servlet的init方法，只执行一次，说明一个servlet在内存中只存在一个对象，servlet是单例的。
						多个用户访问时，可能存在安全问题
						解决：在servlet中 不要定义成员变量，可以定义局部变量，就算定义了成员变量也不要赋值

			service：提供方法 ，提供服务，每一次调用servlet 都会执行一次，执行多次
					每次访问servlet时，service方法都会被调用一次
			destroy：销毁方法，在服务器正常关闭时，执行一次
				servlet被销毁时执行，服务器关闭时，servlet被销毁
				只有服务器正常关闭时，才会执行destroy方法
				destroy方法在servlet被销毁之前执行，一般用于释放资源

**servlet3.0
	支持注解配置，可以不使用web.xml了、
	
	步骤：
		1，创建JavaEE项目，选择servlet的版本3.0以上，可以不创建web.xml
		2，定义一个类，实现servlet接口
		3，复写方法
		4，在类上使用@WebServlet注解，进行配置 在类上写上注解@webServlet("/资源路径")

##IDEA与Tomcat的相关配置
		1，IDEA会为每个Tomcat部署的项目单独建立一份配置文件
		 查看控制台的log:Using CATAINA_BASE:"路径"
		2，工作空间项目   和  Tomcat部署的web项目
			Tomcat真正访问的是“Tomcat部署的web项目”，“Tomcat部署的web项目”对应着“工作空间项目”的web目录下的所有资源
			WEB-INF目录下的资源不能被浏览器直接访问。
			断点调试，还是和以前一样  点个红色点点  在点小虫子 dubug启动





	* Tomcat：web服务器软件    web项目的容器
		1. 下载：http://tomcat.apache.org/
		2. 安装：解压压缩包即可。
			* 注意：安装目录建议不要有中文和空格
		3. 卸载：删除目录就行了
		4. 启动：
			* bin/startup.bat ,双击运行该文件即可
			* 访问：浏览器输入：http://localhost:8080 回车访问自己
							  http://别人的ip:8080 访问别人
			
			* 可能遇到的问题：
				1. 黑窗口一闪而过：
					* 原因： 没有正确配置JAVA_HOME环境变量
					* 解决方案：正确配置JAVA_HOME环境变量

				2. 启动报错：
					1. 暴力：找到占用的端口号，并且找到对应的进程，杀死该进程
						* netstat -ano | findstr 8080
					2. 温柔：修改自身的端口号
						* conf/server.xml
						* <Connector port="8888" protocol="HTTP/1.1"
			               connectionTimeout="20000"
			               redirectPort="8445" />
						* 一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。
							* 好处：在访问时，就不用输入端口号
 
		5. 关闭：
			1. 正常关闭：
				* bin/shutdown.bat
				* ctrl+c
			2. 强制关闭：
				* 点击启动窗口的×
		6. 配置:
			* 部署项目的方式：
				1. 直接将项目放到webapps目录下即可。
					* /hello：项目的访问路径-->虚拟目录
					* 简化部署：将项目打成一个war包，再将war包放置到webapps目录下。
						* war包会自动解压缩

				2. 配置conf/server.xml文件
					在<Host>标签体中配置
					<Context docBase="D:\hello" path="/hehe" />
					* docBase:项目存放的路径
					* path：虚拟目录

				3. 在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写
					<Context docBase="D:\hello" />
					* 虚拟目录：xml文件的名称
			
			* 静态项目和动态项目：
				* 目录结构
					* java动态项目的目录结构：
						-- 项目的根目录
							-- WEB-INF目录：
								-- web.xml：web项目的核心配置文件
								-- classes目录：放置字节码文件的目录
								-- lib目录：放置依赖的jar包

			* 将Tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目。

	