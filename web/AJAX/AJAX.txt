AJAX:
	概念：ASynchronous JavaScript And XML  异步的JavaScript 和XML
		异步和同步：客户端和服务端相互通信基础上
			同步 ：客户端必须等待服务器端的响应，在等待的期间客户端不能做其他操作
			异步：客户端不需要等待服务器端的响应。在服务处理请求过程中，客户端可以进行其他操作。
		AJAX是一种在无需重新加载整个网页的情况下，能过更新部分网页的技术
		通过在后台与服务器进行少量数据交换，AJAX可以使网页实现异步更新。这意味着可以在不重新加载整个页面的情况下，对网页的某部分进行更新
			提升用户的体验

	实现方式：
		原生的JS实现方式
				代码是固定的
					function func(){//定义方法   发送异步请求  
						//创建核心对象
						var xmlhttp;
						if(window.XMLHttpRequest){
							//兼容 code for IE7+ Firefox Chrome， Opera，Safari
							xmlhttp=new XMLHttpRequest();
						}else{
						xmlhttp=new ActiveXObject("Microsoft.XMLHTTP"); //兼容 code for IE6 IE5
					}
						}
					//发送请求  就是建立连接
					//参数 	请求方式 GET POST    get 方式，请求参数在URL后边拼接 。send方法为空参  post 请求方式在send方法中定义
						//  请求的URL路径     true是异步请求  false是同步请求
						xmlhttp.open("GET","ajaxServlet?username=tom",true)
					//发送请求
					xmlhttp.send();
					//接收并处理来自服务器的结果
						// 要在服务器响应成功后在获取xmlhttp.responseText
						xmlhttp.onreadystatechange=function(){
						if(xmlhttp.redyState==4&&xmlhttp.status=200)//判断readyState就绪状态是否为4，判断status响应状态码是否为200
							{
							var responsetext=xmlhttp.responseText;//获取服务器响应的结果
		}
						
}
					
		JQeury实现方式
			$ajax()：语法：$.ajax({键值对});
				代码实现方式
				function fun(){

				$.ajax({
					url:"servlet",//请求路径
					type:"post",//请求方式
					//data:"name=123&age=sd",请求参数
					data:{"name":"asda","age":"12"}
					sucess:function(j){//响应成功后的回调函数
						alter(j)
							}
					error:function(){//表示如果响应出现错误，会执行回调函数
						alert("出错了")
					}，
					dataType:"text"//设置接收到的响应数据格式 如	

				})

			}

			$get()：发送get请求  $.get(url,[data],[callback],[type])
				参数： url 请求路径  data 请求参数  callback 回调函数   type：响应结果的类型
				代码：
					function fun(){
							$.get("servlet",//请求路径
									{name:"roe",age:"23"},//请求参数
									function(j){ 	//响应结果
									alert(j)},	//打印结果
									"text")}	//接收结果格式
				
			$post()：方式post请求
				参数： url 请求路径  data 请求参数  callback 回调函数   type：响应结果的类型
				代码：
					function fun(){
							$.post("servlet",//请求路径
									{name:"roe",age:"23"},//请求参数
									function(j){ 	//响应结果
									alert(j)},	//打印结果
									"text")}	//接收结果格式


	##JSON
		概念：JavaScript  Object Notation  JavaScript对象表示法
			json现在多用于储存和交换文本信息的语法
			进行数据传输
			JSON比XML更小、更快、更易解析
		
		语法：
			基本规则
				数据在名称/值对中：json数据是由键值对构成的
					键用引号（单双引都可以）引起来，也可以不使用引号
					值的取值类型：
						数字（整数或浮点数）
						字符串（在双引号中）
						逻辑值（true或false）
						数组（在方括号中）{"persons":[{},{}]}
						对象（在花括号中）{"address":{"province":"陕西"....}}
						null
					数据由逗号分隔：多个键值对有逗号分隔
					花括号保存对象：使用{}定义json格式
					方括号保存数组：[ ]
			获取数据

				json对象.键名
				json对象["键名"]（遍历需要这种）
				数组对象[索引]


		* JSON解析器：
			* 常见的解析器：Jsonlib，Gson，fastjson，jackson
		
		1. JSON转为Java对象
			1. 导入jackson的相关jar包
			2. 创建Jackson核心对象 ObjectMapper
			3. 调用ObjectMapper的相关方法进行转换
				1. readValue(json字符串数据,Class)
		2. Java对象转换JSON
			1. 使用步骤：
				1. 导入jackson的相关jar包
				2. 创建Jackson核心对象 ObjectMapper
				3. 调用ObjectMapper的相关方法进行转换
					1. 转换方法：
						* writeValue(参数1，obj):
		                    参数1：
		                        File：将obj对象转换为JSON字符串，并保存到指定的文件中
		                        Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中
		                        OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中
		                * writeValueAsString(obj):将对象转为json字符串

					2. 注解：
						1. @JsonIgnore：排除属性。
						2. @JsonFormat：属性值得格式化
							* @JsonFormat(pattern = "yyyy-MM-dd")

					3. 复杂java对象转换
						1. List：数组
						2. Map：对象格式一致